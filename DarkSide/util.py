from Crypto.Util.number import long_to_bytes as l2b, bytes_to_long as b2l
import pefile

pe_handle = pefile.PE('06355667ea0deef9cfeedc864d74edfe986cf9a9f129532f4a442f7098e1e054')
pe_patched_handle = pefile.PE('06355667ea0deef9cfeedc864d74edfe986cf9a9f129532f4a442f7098e1e054_patched')

# sub_40A047
def init_buffer(arg1, arg2, arg3):
    s = 0xf0
    arg2 = list(arg2)
    seed = [b2l(arg1[i:i+4][::-1]) for i in range(0, len(arg1), 4)]
    buff = [0] * 256

    while s >= 0: 
        buff[s+0x0c:s+0x10] = list(l2b(seed[0])[::-1].ljust(4, b'\x00'))
        buff[s+0x08:s+0x0c] = list(l2b(seed[3])[::-1].ljust(4, b'\x00'))
        buff[s+0x04:s+0x08] = list(l2b(seed[1])[::-1].ljust(4, b'\x00'))
        buff[s+0x00:s+0x04] = list(l2b(seed[2])[::-1].ljust(4, b'\x00'))

        seed[0] -= 0x10101010 ; seed[0] &= 0xffffffff
        seed[1] -= 0x10101010 ; seed[1] &= 0xffffffff
        seed[2] -= 0x10101010 ; seed[2] &= 0xffffffff
        seed[3] -= 0x10101010 ; seed[3] &= 0xffffffff

        s -= 0x10

    i = 0
    for _ in range(16):
        j = 0x10 * _
        for k in range(arg3):
            res_low = buff[j]
            i = (i + arg2[k] + res_low) & 0xff
            res_high = buff[i]
            res = res_low + res_high * 256
            buff[i] = res_low
            buff[j] = res_high
            j += 1

    return buff

# sub_40a0d5
def decrypt_block(enc_block, block_size):
    buff = buffer.copy()
    j = 0
    for i in range(block_size):
        j = (buff[i+1] + j) & 0xff
        k = buff[i+1]
        temp = buff[j]
        buff[j] = k
        buff[i+1] = temp
        k = (temp + k) & 0xff
        enc_block[i] ^= buff[k]
    return enc_block

# sub_40a000
def decrypt(enc, size):
    block_num = size // 0xff
    decrypted = b''
    enc_blocks = [enc[i:i+255] for i in range(0, len(enc), 255)]
    
    for enc_block in enc_blocks[:-1]:
        decrypted += bytes(decrypt_block(list(enc_block), 255))

    remaining = size - block_num * 0xff
    decrypted += bytes(decrypt_block(list(enc_blocks[-1]), remaining))
    return decrypted

rsrc_data = pe_handle.sections[-1].get_data()[:48]
arg1 = rsrc_data[16:32]
arg2 = rsrc_data[32:48]

buffer = init_buffer(arg1, arg2, 0x10)

print('[+] buffer was successfully initialized')